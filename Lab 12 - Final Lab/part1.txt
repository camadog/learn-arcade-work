Requirements for Part 1

    *Cite in the code comments what images and sounds you’ve used. So for every image or sound loaded,
    put a # tag in the line above with a citation on where it came from. I’ll expect more than just a URL,
    give me a name of the website as well.

    *If you find code to use that doesn’t come from this website or from arcade.academy, cite it.
    Otherwise you’ll be plagiarizing, and flunked from the class.

Each of the three parts for the final lab raises the bar on what your game needs to be able to do.

    *Open up a screen.

    *Set up the items to be drawn on the screen. Figure out the images that you want to use.

    *Provide some sort of player movement or interaction via mouse, keyboard, or game controller.
    Get items on the screen to move, if applicable.

    *Have something that is at least kind-of playable.

Tips:

    If your program will involve things running into each other, start by using sprites.
    Do not start by using drawing commands, and expect to add in sprites later.
    It won’t work and you’ll need start over from scratch. This will be sad.

    If you are coding a program like mine sweeper or connect four, do not use sprites.
    Since collision detection is not needed, there is no need to mess with sprites.

    While you can start with and use any of the example game code from this website or arcade.academy,
    don’t just turn these in as Part 1. You’ll need to add a lot before it qualifies.

    A very common mistake is to make a call to self.all_sprites_list.update() and self.physics_engine.update().
    This will cause you to warp through walls. You want to specifically update lists that don’t include the player,
    like self.enemy_list.update().

    Remember that any extra white-space around your image will throw off collision detection.
    Best to check and trim white space from images you use.

    OpenGameArt.org has a lot of images and sounds you can use royalty-free.

    Kenney.nl has many images and sounds as well.
